W ćwiczeniu znajdziesz kod prostej książki adresowej. Problem polega na tym, że gdy próbujemy wyszukać kontakt na podstawie adresu email, a żaden kontakt nie zostanie odnaleziony, to rzucany jest wyjątek NullPointerException.

Dane w programie odczytywane są z pliku o nazwie contacts.csv. Przykładowe dane testowe:

Jan;Kowalski;777666555;jankowalski@example.com
Marian;Potocki;999888777;potomar@example.com
Aneta;Bartecka;444555666;bar.aneta@example.com1
2
3
file_copy
Gdy plik nie zostanie odnaleziony, to także w tym przypadku rzucany jest wyjątek NullPointerException i program kończy swoje działanie.

Przerób kod aplikacji w taki sposób, aby zabezpieczyć się przed tymi dwoma sytuacjami. Wykorzystaj w tym celu typ Optional.

Kod aplikacji:

Contact.java

import java.util.Objects;

class Contact {
    private String firstName;
    private String lastName;
    private String telephone;
    private String email;

    public Contact(String firstName, String lastName, String telephone, String email) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.telephone = telephone;
        this.email = email;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getTelephone() {
        return telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Contact contact = (Contact) o;
        return Objects.equals(firstName, contact.firstName) &&
                Objects.equals(lastName, contact.lastName) &&
                Objects.equals(telephone, contact.telephone) &&
                Objects.equals(email, contact.email);
    }

    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName, telephone, email);
    }

    String getShortInfo() {
        return firstName + " " + lastName + " " + telephone;
    }
}1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
file_copy
ContactManager.java

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class ContactManager {
    private Set<Contact> contacts = new HashSet<>();

    void addContact(Contact contact) {
        contacts.add(contact);
    }

    Contact findByEmail(String email) {
        if (email == null)
            throw new NullPointerException("email cannot be null");
        for (Contact contact : contacts) {
            if (email.equals(contact.getEmail()))
                return contact;
        }
        return null;
    }

    List<Contact> findByLastName(String textFragment) {
        if (textFragment == null)
            throw new NullPointerException("search text cannot be null");
        List<Contact> foundContacts = new ArrayList<>();
        for (Contact contact : contacts) {
            if (contact.getLastName().contains(textFragment))
                foundContacts.add(contact);
        }
        return foundContacts;
    }
}1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
file_copy
ContactReader.java

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

class ContactReader {
    static ContactManager readFile(String fileName) {
        try (Scanner scanner = new Scanner(new File(fileName))) {
            ContactManager contactManager = new ContactManager();
            while (scanner.hasNextLine()) {
                Contact contact = createContactFromText(scanner.nextLine());
                contactManager.addContact(contact);
            }
            return contactManager;
        } catch (FileNotFoundException e) {
            return null;
        }
    }

    private static Contact createContactFromText(String text) {
        String[] data = text.split(";");
        return new Contact(data[0], data[1], data[2], data[3]);
    }
}1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
file_copy
ContactApp.java

import java.util.Scanner;

class ContactApp {
    public static void main(String[] args) {
        ContactManager contactManager = ContactReader.readFile("contacts.csv");
        Scanner scanner = new Scanner(System.in);
        System.out.println("Podaj adres email do wyszukania kontaktu:");
        String email = scanner.nextLine();
        Contact contactByEmail = contactManager.findByEmail(email);
        System.out.println("Kontakt o wskazanym adresie email:");
        System.out.println(contactByEmail.getShortInfo());
    }
}